<?php
################################################################################
# @Name : mail2ticket.php
# @Description : convert mail to ticket
# @call : parameters in connector tab or using an external cron job
# @parameters : 
# @Author : Flox
# @Create : 07/04/2013
# @Update : 10/09/2020
# @Version : 3.2.4 p2
################################################################################

//initialize variables 
if(!isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) $_SERVER['HTTP_ACCEPT_LANGUAGE'] = '';

//locales
$lang = substr($_SERVER['HTTP_ACCEPT_LANGUAGE'], 0, 2);
if($lang=='fr') {$_GET['lang'] = 'fr_FR';}
else {$_GET['lang'] = 'en_US';}

define('PROJECT_DIR', realpath('./'));
define('LOCALE_DIR', PROJECT_DIR .'/locale');
define('DEFAULT_LOCALE', '($_GET[lang]');
require_once('components/php-gettext/gettext.inc');
$encoding = 'UTF-8';
$locale = (isset($_GET['lang']))? $_GET['lang'] : DEFAULT_LOCALE;
T_setlocale(LC_MESSAGES, $locale);
T_bindtextdomain($_GET['lang'], LOCALE_DIR);
T_bind_textdomain_codeset($_GET['lang'], $encoding);
T_textdomain($_GET['lang']);

//define encodage type 
header('Content-Type: text/html; charset=utf-8');

//call phpimap component
require_once('components/PhpImap/__autoload.php');
use PhpImap\Exceptions\ConnectionException;
use PhpImap\Mailbox;

//functions
require_once('core/functions.php');

if(!is_dir(__DIR__."/upload/ticket"))  {mkdir(__DIR__.'/upload/ticket/', 0777, true);}

//function to add attachment in image on ticket
function func_attachement($c_ticket_number,$c_name_dir_upload,$mail,$db,$mailbox,$count,$contentype)
{
	$c_name_dir_ticket = $c_name_dir_upload; 
	
	//move attachment to upload directory
	$tabAttachments = $mail->getAttachments();
	foreach ($tabAttachments as $tabAttachment){
		//case image inside in mail
		//if($tabAttachment->disposition=="inline" || $tabAttachment->disposition==null) #4015
		if($tabAttachment->disposition=="inline" || $tabAttachment->disposition=="INLINE" || $tabAttachment->disposition==null) 
		{
			$c_name_file_original = basename($tabAttachment->filePath);
			$c_name_file = $c_ticket_number.'_'.$c_name_file_original;
			
			echo '['.$mailbox.'] [mail '.$count.'] Image into body: <span style="color:green">'.$c_name_file.'</span><br />';
			$dispo=$tabAttachment->disposition;
			echo '['.$mailbox.'] [mail '.$count.'] Disposition: <span style="color:green">'.$dispo.'</span><br />';
			//check if link are not present #4371 from apple mail
			if($contentype=='textPlain')
			{
				$c_name_file = $tabAttachment->name;
				if($c_name_file && $c_ticket_number)
				{
					$real_filename=preg_replace("/[^A-Za-z0-9\_\-\.]/", '', $c_name_file);
					$real_filename=strip_tags($real_filename);
					if(CheckFileExtension($real_filename)==true) {
						$target_folder='./upload/ticket/';
						//generate storage filename
						$c_name_file=$c_ticket_number.'_'.md5(uniqid());
						
						echo '['.$mailbox.'] [mail '.$count.'] Attachment: <span style="color:green">'.$real_filename.'</span><br />';
						$dispo=$tabAttachment->disposition;
						echo '['.$mailbox.'] [mail '.$count.'] Disposition: <span style="color:green">'.$dispo.'</span><br />';
						//db insert in attachment table
						$uid=md5(uniqid());
						$qry=$db->prepare("INSERT INTO `tattachments` (`uid`,`ticket_id`,`storage_filename`,`real_filename`) VALUES (:uid,:ticket_id,:storage_filename,:real_filename)");
						$qry->execute(array('uid' => $uid,'ticket_id' => $c_ticket_number,'storage_filename' => $c_name_file,'real_filename' => $real_filename));
						
					} else {
						echo '['.$mailbox.'] [mail '.$count.'] Blacklisted file: <span style="color:red">'.$real_filename.'</span><br />';
						logit('security', 'IMAP connector : blacklisted file blocked ('.$real_filename.')','0');
					}
				} 
			}
		} 
		else //case attachment in mail
		{
			$c_name_file = $tabAttachment->name;
			if($c_name_file && $c_ticket_number)
			{
				$real_filename=preg_replace("/[^A-Za-z0-9\_\-\.\s+]/", '', $c_name_file);
				$real_filename=strip_tags($real_filename);
				if(CheckFileExtension($real_filename)==true) {
					$target_folder='./upload/ticket/';
					//generate storage filename
					$c_name_file=$c_ticket_number.'_'.md5(uniqid());
					
					echo '['.$mailbox.'] [mail '.$count.'] Attachment: <span style="color:green">'.$real_filename.'</span><br />';
					$dispo=$tabAttachment->disposition;
					echo '['.$mailbox.'] [mail '.$count.'] Disposition: <span style="color:green">'.$dispo.'</span><br />';
					//db insert in attachment table
					$uid=md5(uniqid());
					$qry=$db->prepare("INSERT INTO `tattachments` (`uid`,`ticket_id`,`storage_filename`,`real_filename`) VALUES (:uid,:ticket_id,:storage_filename,:real_filename)");
					$qry->execute(array('uid' => $uid,'ticket_id' => $c_ticket_number,'storage_filename' => $c_name_file,'real_filename' => $real_filename));
					
				} else {
					echo '['.$mailbox.'] [mail '.$count.'] Blacklisted file: <span style="color:red">'.$real_filename.'</span><br />';
					logit('security', 'IMAP connector : blacklisted file "'.$real_filename.'" blocked, ticket '.$c_ticket_number,'0');
				}
			} 
		}
		rename($tabAttachment->filePath,$c_name_dir_ticket.'/'.$c_name_file); 
	}
	return $mail->replaceInternalLinks('upload/ticket');
}

//initialize counter
$count=0;

//connexion script with database parameters
require "connect.php";

//switch SQL MODE to allow empty values with latest version of MySQL
$db->exec('SET sql_mode = ""');

//load parameters table
$qry=$db->prepare("SELECT * FROM `tparameters`");
$qry->execute();
$rparameters=$qry->fetch();
$qry->closeCursor();

if(!$rparameters['imap']) {die();}

//display error parameter
if($rparameters['debug']) {
	ini_set('display_errors', 'On');
	error_reporting(E_ALL);
} else {
	ini_set('display_errors', 'Off');
	error_reporting(E_ALL & ~E_DEPRECATED & ~E_STRICT);
}

//case to certificat failure  
if($rparameters['imap_ssl_check']==0) {$ssl_check='/novalidate-cert';} else {$ssl_check='';}

//hostname building
$hostname = '{'.$rparameters['imap_server'].':'.$rparameters['imap_port'].''.$ssl_check.'}'.$rparameters['imap_inbox'].'';

//connect to in-box
$c_name_dir_upload =  __DIR__.'/upload/ticket';

if($rparameters['imap_server'])
{
	echo 'IMAP server : <span style="color:green">'.$rparameters['imap_server'].'</span><br />';
} else {
	echo 'IMAP server : <span style="color:red">No IMAP server detected</span><br /><br />';
}
if($rparameters['imap_port'])
{
	echo 'IMAP port : <span style="color:green">'.$rparameters['imap_port'].'</span><br />';
} else {
	echo 'IMAP port : <span style="color:red">No IMAP port detected</span><br /><br />';
}

echo 'IMAP connection string : <span style="color:green">'.$hostname.'</span><br />';

//define mailbox to check
$mailboxes=array();
if($rparameters['imap_mailbox_service']==1)
{
	if($rparameters['imap_user']) {array_push($mailboxes, $rparameters['imap_user']);}
	$qry=$db->prepare("SELECT `id`,`mail`,`password`,`service_id` FROM `tparameters_imap_multi_mailbox`");
	$qry->execute();
	while($row=$qry->fetch()) 
	{
		array_push($mailboxes, $row['mail']);		
	}
	$qry->closeCursor();
	echo 'IMAP connector mode : <span style="color:green">MULTI</span><br /><br />';
} else {
	array_push($mailboxes, $rparameters['imap_user']);
	echo 'IMAP connector mode : <span style="color:green">SINGLE</span><br /><br />';
	if(preg_match('/gs_en/',$rparameters['imap_password'])) {$rparameters['imap_password']=gs_crypt($rparameters['imap_password'], 'd' , $rparameters['server_private_key']);}
	$mailbox_password=$rparameters['imap_password'];
}

foreach ($mailboxes as $mailbox)
{
	if($rparameters['imap_mailbox_service']==1) {
		$qry=$db->prepare("SELECT `password` FROM `tparameters_imap_multi_mailbox` WHERE mail=:mail");
		$qry->execute(array('mail' => $mailbox));
		$row=$qry->fetch();
		$qry->closeCursor();
		
		if(!isset($row['password'])) {
			if(preg_match('/gs_en/',$rparameters['imap_password'])) {$rparameters['imap_password']=gs_crypt($rparameters['imap_password'], 'd' , $rparameters['server_private_key']);}
			$mailbox_password=$rparameters['imap_password'];
		} else {
			if(preg_match('/gs_en/',$row['password'])) {$row['password']=gs_crypt($row['password'], 'd' , $rparameters['server_private_key']);}
			$mailbox_password=$row['password'];
		}
	}
	
	//connect to mailbox
	$con_mailbox = new Mailbox($hostname, $mailbox, $mailbox_password,$c_name_dir_upload);
	try {
		$mailsIds = $con_mailbox->searchMailbox('ALL');
    } catch (ConnectionException $ex) {
		logit('error','IMAP connector : connection failed: '.$ex->getMessage(),'0');
        die('IMAP connection failed: '.$ex->getMessage());
    } catch (Exception $ex) {
		logit('error','IMAP connector : An error occurred: '.$ex->getMessage(),'0');
        die('An error occurred: '.$ex->getMessage());
    }
	
	if(!$mailsIds) {
		echo '['.$mailbox.'] Detect mail in mailbox : <span style="color:green">NO</span><br />';
	} else {
		echo '['.$mailbox.'] Detect mail in mailbox : <span style="color:green">YES</span><br />';
	
		//treatment for all mail inside mailbox
		$seen=0;
		$tab_MailsInfos =  $con_mailbox ->getMailsInfo($mailsIds);		
		foreach ($tab_MailsInfos as $tab_MailsInfo){
			if($tab_MailsInfo->seen==0)
			{
				$seen=1;
				$count=$count+1;
				$mail = $con_mailbox ->getMail($tab_MailsInfo->uid);
				$from = $mail->fromAddress;
				$subject = $mail->subject;
				if($rparameters['server_timezone']){date_default_timezone_set($rparameters['server_timezone']); $datetime = date('Y-m-d H:i:s');} else {$datetime = $mail->date;}
				$blacklist_mail=0;
				if(!$subject){$subject=T_('(Sans objet)');} //default subject 
				//detect blacklist mail or domain for exclusion
				if($rparameters['imap_blacklist']!='')
				{
					$mail_blacklist=explode(';',$rparameters['imap_blacklist']);
					foreach ($mail_blacklist as $value) {
						//check if each blacklist value exit in source mail as sender
						if(preg_match("/$value/i", $from) && $value){$blacklist_mail=1;}
					}
				}
				if($blacklist_mail==1) {
					echo '['.$mailbox.'] [mail '.$count.'] Import mail "'.$subject.'": <span style="color:red">KO (blacklist detected on '.$from.')</span><br />';
				} 
				else
				{
					//check if mail is HTML
					if($mail->textHtml == NULL){
						$contentype='textPlain';
						$message = nl2br($mail->textPlain);
						$description = nl2br($mail->textPlain);
					}else{
						$contentype='textHtml';
						$message = $mail->textHtml;
						$description = $mail->textHtml;
					}
					
					//special char convert
					$subject = str_replace('_', ' ', $subject);

					//find gestsup userid from mail address
					$qry=$db->prepare("SELECT `id` FROM `tusers` WHERE mail=:mail AND disable='0'");
					$qry->execute(array('mail' => $from));
					$row=$qry->fetch();
					$qry->closeCursor();
					if(isset($row['id']))
					{
						$user_id=$row['id'];
						$c_FromMessage='';
					} else {
						$user_id='0';
						$c_FromMessage='';
					}
					
					//get extra informations from message header
					$head = $con_mailbox->getMailHeader($tab_MailsInfo->uid);
					
					//detect ticket number in subject to update an existing ticket
					$c_reg = "/n°(.*?):/i"; //regex for extract ticket number
					preg_match($c_reg, $subject, $matches); // extract ticket number
					@$find_ticket_number = $matches[1];
					$find_ticket_number=str_replace(' ','',$find_ticket_number);
					//update existing ticket
					if($find_ticket_number && $rparameters['imap_reply']) 
					{
						//get attachement and image 
						if($contentype=='textHtml') { 
							$message = (isset($c_FromMessage)?$c_FromMessage:'').func_attachement($find_ticket_number,$c_name_dir_upload,$mail,$db,$mailbox,$count,$contentype);
						} else { //case plain text with attachment
							(isset($c_FromMessage)?$c_FromMessage:'').func_attachement($find_ticket_number,$c_name_dir_upload,$mail,$db,$mailbox,$count,$contentype);
						}
						if($rparameters['debug']) {echo '['.$mailbox.'] [mail '.$count.'] Mail content :<br />'.$message.'<br />';}
						$find_start_delimiter=0;
						$find_end_delimiter=0;
						//delete ticket part from mail to keep only answer
						if(strpos($message,'---- Repondre au dessus de cette ligne ----')) {$start_tag='---- Repondre au dessus de cette ligne ----'; $find_start_delimiter=1;}
						if(strpos($message,'---- Repondre au dessus du ticket ----')) {$end_tag='---- Repondre au dessus du ticket ----'; $find_end_delimiter=1;}
						if(strpos($message,'---- Answer above this line ----')) {$start_tag='---- Answer above this line ----'; $find_start_delimiter=1;}
						if(strpos($message,'---- Answer above the ticket ----')) {$end_tag='---- Answer above the ticket ----'; $find_end_delimiter=1;}
						if(strpos($message,'---- Responda por encima de esta línea ----')) {$start_tag='---- Responda por encima de esta línea ----'; $find_start_delimiter=1;}
						if(strpos($message,'---- Responda arriba del boleto ----')) {$end_tag='---- Responda arriba del boleto ----'; $find_end_delimiter=1;}
						if(strpos($message,'---- Antworte über diese Zeile ----')) {$start_tag='---- Antworte über diese Zeile ----'; $find_start_delimiter=1;}
						if(strpos($message,'---- Über dem Ticket antworten ----')) {$end_tag='---- Über dem Ticket antworten ----';$find_end_delimiter=1;}

						//cut answer if delimiters detected
						if($find_start_delimiter && $find_end_delimiter)
						{
							$end_mail=explode($end_tag,$message);
							$end_mail=$end_mail[1];
							$start_mail=explode($start_tag,$message);
							$start_mail=$start_mail[0];
							$message=$start_mail.$end_mail;	
						} elseif($find_end_delimiter && !$find_start_delimiter) //case only one delimiters detected
						{
							$end_mail=explode($end_tag,$message);
							$end_mail=$end_mail[1];
							$start_mail=explode('----',$message);
							$start_mail=$start_mail[0];
							$message=$start_mail.$end_mail;	
						}
						
						//update img link
						$tabAttachments = $mail->getAttachments();
						foreach ($tabAttachments as $tabAttachment){
							if($tabAttachment->disposition=="inline" || $tabAttachment->disposition=="INLINE" || $tabAttachment->disposition==null)  //case image inside in mail
							{
								$c_name_file_original = basename($tabAttachment->filePath);
								$c_name_file_rename = $find_ticket_number.'_'.$c_name_file_original;
								$message=str_replace($c_name_file_original,$c_name_file_rename,$message);
							}
						}
						
						//update ticket state if ticket is closed and user reply
						$qry=$db->prepare("SELECT `state` FROM `tincidents` WHERE id=:id");
						$qry->execute(array('id' => $find_ticket_number));
						$ticket_state=$qry->fetch();
						$qry->closeCursor();
						if($ticket_state['state']=='3')
						{
							//update unread state
							$qry=$db->prepare("UPDATE `tincidents` SET `state`='2' WHERE `id`=:id");
							$qry->execute(array('id' => $find_ticket_number));
							//insert switch state in thread
							$qry=$db->prepare("INSERT INTO `tthreads` (`ticket`,`date`,`author`,`type`,`state`) VALUES (:ticket,:date,:author,'5','2')");
							$qry->execute(array('ticket' => $find_ticket_number,'date' => $datetime,'author' => $user_id));
						}

						//sanitize HTML code
						$message=str_replace('<input','< input',$message); //remove input 
						$message=str_replace('text-decoration:underline;','',$message);
						$message=preg_replace('/(<(style)\b[^>]*>).*?(<\/\2>)/is', "$1$3", $message); //remove style in outlook client
						$message=preg_replace('/(<(base)\b[^>]*>)/is', "", $message); //remove base link
						$message=preg_replace('/(<(body)\b[^>]*>)/is', "<body>", $message); //remove body attribute such as background #4722
						if(!preg_match("/<HTML/i",$message)){$message=strip_tags($message,'<p><a><span><br><div>');}
						
						//insert thread in ticket
						$qry=$db->prepare("INSERT INTO `tthreads` (`ticket`,`date`,`author`,`text`) VALUES (:ticket,:date,:author,:text)");
						$qry->execute(array('ticket' => $find_ticket_number,'date' => $datetime,'author' => $user_id,'text' => $message));
						
						echo '['.$mailbox.']  [mail '.$count.'] Import mail "'.$subject.'": <span style="color:green">OK</span><br />';
						if($rparameters['debug']) 
						{
							echo '['.$mailbox.'] [mail '.$count.'] Update ticket: <span style="color:green">OK (ID=<a href="index.php?page=ticket&id='.$find_ticket_number.'" target="_blank\" >'.$find_ticket_number.'</a>)</span><br />';
							echo '['.$mailbox.'] [mail '.$count.'] Content type detected: <span style="color:green">'.$contentype.'</span><br />';
						}
						//update unread state
						$qry=$db->prepare("UPDATE `tincidents` SET `techread`='0' WHERE `id`=:id");
						$qry->execute(array('id' => $find_ticket_number));
						
						//send mail to technician 
						if($rparameters['mail_auto_tech_modify'])
						{
							echo '['.$mailbox.'] [mail '.$count.'] SEND Mail to technician: <span style="color:green">OK (mail_auto_tech_modify parameter enable)</span><br />';
							//get tech mail 
							$qry = $db->prepare("SELECT tusers.mail FROM tusers,tincidents WHERE tusers.id=tincidents.technician AND tincidents.id=:ticket_id");
							$qry->execute(array('ticket_id' => $find_ticket_number));
							$techmail=$qry->fetch();
							$qry->closeCursor();
							if(!empty($techmail))
							{
								if($rparameters['mail_from_adr']){$from=$rparameters['mail_from_adr'];}
								$to=$techmail['mail'];
								$object=T_('Le ticket').' n°'.$find_ticket_number.' : '.T_(' a été modifié');
								$message = '
								'.T_('Le ticket').' n°'.$find_ticket_number.' '.T_('a été modifié').' <br />
								<br />
								'.T_('Pour consulter le ticket cliquer sur le lien suivant ').' <a href="'.$rparameters['server_url'].'/index.php?page=ticket&id='.$find_ticket_number.'">'.$rparameters['server_url'].'/index.php?page=ticket&id='.$find_ticket_number.'</a>.
								';
								$mail_auto=true;
								require('core/message.php');
								
								//trace mail in thread
								$qry=$db->prepare("INSERT INTO `tthreads` (`ticket`,`date`,`author`,`text`,`type`,`dest_mail`) VALUES (:ticket,:date,:author,'','3',:dest_mail)");
								$qry->execute(array('ticket' => $find_ticket_number,'date' => $datetime,'author' => 0,'dest_mail' => $techmail['mail']));
							}
							
						}
					} else { //create ticket
						$qry=$db->prepare("INSERT INTO `tincidents` (`user`,`technician`,`title`,`description`,`date_create`,`techread`,`state`,`criticality`,`disable`,`place`,`creator`) 
						VALUES (:user,'0',:title,'',:date_create,'0',:state,'4','0','0',:creator)");
						$qry->execute(array('user' => $user_id,'title' => $subject,'date_create' => $datetime,'state' => $rparameters['ticket_default_state'],'creator' => $user_id));
						
						//get ticket number
						$c_ticket_number = $db->lastInsertId();
						
						//insert threads
						$qry=$db->prepare("INSERT INTO `tthreads` (`ticket`,`date`,`type`) VALUES (:ticket,:date,'6')");
						$qry->execute(array('ticket' => $c_ticket_number,'date' => $datetime));
						
						//check if current mailbox is attached with service
						if($rparameters['imap_mailbox_service'])
						{
							//get service id for current mailbox
							$qry=$db->prepare("SELECT `id`,`name` FROM `tservices` WHERE id IN (SELECT service_id FROM `tparameters_imap_multi_mailbox` WHERE mail=:mail)");
							$qry->execute(array('mail' => $mailbox));
							$row=$qry->fetch();
							$qry->closeCursor();

							if(!empty($row['id'])) {
								echo '['.$mailbox.'] [mail '.$count.'] Service associate with this mailbox: <span style="color:green">'.$row['name'].' ('.$row['id'].')</span><br />';
								$qry=$db->prepare("UPDATE `tincidents` SET `u_service`=:u_service WHERE `id`=:id");
								$qry->execute(array('u_service' => $row['id'],'id' => $c_ticket_number));
							} else {
								echo '['.$mailbox.'] [mail '.$count.'] Service associate with this mailbox: <span style="color:red">None</span><br />';
							}
						}
						
						echo '['.$mailbox.'] [mail '.$count.'] Import mail "'.$subject.'": <span style="color:green">OK</span><br />';
						if($rparameters['debug']) 
						{
							echo '['.$mailbox.'] [mail '.$count.'] Create new ticket: <span style="color:green">OK (ID=<a href="index.php?page=ticket&id='.$c_ticket_number.'" target="_blank\" >'.$c_ticket_number.'</a>)</span><br />';
							echo '['.$mailbox.'] [mail '.$count.'] Content type detected: <span style="color:green">'.$contentype.'</span><br />';
						}
						//get attachement and images from mail
						$message = (isset($c_FromMessage)?$c_FromMessage:'').func_attachement($c_ticket_number,$c_name_dir_upload,$mail,$db,$mailbox,$count,$contentype);
						
						//add extra informations on ticket description
						setlocale(LC_TIME, 'fr_FR.utf8','fra');
						$date=strtotime(date('Y-m-d H:i:s'));
						$date_only=utf8_encode(strftime("%A %e %B %G",$date));
						$date=$date_only.' '.T_('à').' '.strftime("%H:%M",$date);
						
						$description_header=
						'<b>'.T_('De').' :</b> '.$mail->fromAddress.'<br /> 
						<b>'.T_('Envoyé le').' : </b> '.$date.'<br /> 
						<b>'.T_('Destinataire(s)').' :</b> '.$head->toString.' <br />';
						if(isset($head->headers->ccaddress)){$description_header.='<b>'.T_('Copie').' :</b> '.$head->headers->ccaddress.'<br />';}
						$description_header.='
						<b>'.T_('Objet').' :</b> '.$mail->subject.'<br /> 
						<b>'.T_('Message').' :</b><br /> 
						';
						
						if($contentype=='textPlain')
						{
							//sanitize HTML code
							$description=str_replace('<input','< input',$description); //remove input 
							if(isset($c_FromMessage)) {$description=$description_header.$c_FromMessage.$description;}
							$qry=$db->prepare("UPDATE `tincidents` SET `description`=:description WHERE `id`=:id");
							$qry->execute(array('description' => $description,'id' => $c_ticket_number));
						}
						else //html case
						{
							//update img link
							$tabAttachments = $mail->getAttachments();
							foreach ($tabAttachments as $tabAttachment){
								if($tabAttachment->disposition=="inline" || $tabAttachment->disposition=="INLINE" || $tabAttachment->disposition==null)  //case image inside in mail
								{
									$c_name_file_original = basename($tabAttachment->filePath);
									$c_name_file_rename = $c_ticket_number.'_'.$c_name_file_original;
									$message=str_replace($c_name_file_original,$c_name_file_rename,$message);
								}
							}
							
							//sanitize HTML code
							$message=str_replace('<input','< input',$message); //remove input 
							$message=str_replace("text-decoration:underline;", "", $message);
							$message=preg_replace('/(<(base)\b[^>]*>)/is', "", $message); //remove base link
							$message=preg_replace('/(<(body)\b[^>]*>)/is', "<body>", $message); //remove body attribute such as background #4722
							
							//add header informations
							$message=$description_header.$message;
							
							//update description
							$qry=$db->prepare("UPDATE `tincidents` SET `description`=:description WHERE `id`=:id");
							$qry->execute(array('description' => $message,'id' => $c_ticket_number));
						}
						
						//send mail to user 
						if($rparameters['mail_auto_user_newticket'])
						{
							$send=1;
							$_GET['id']=$c_ticket_number;
							include('core/mail.php');
							echo '['.$mailbox.'] [mail '.$count.'] SEND Mail to sender: <span style="color:green">OK (mail_auto_user_newticket parameter enable)</span><br />';
						}
						//send mail to admin 
						if($rparameters['mail_newticket'] && $rparameters['mail_newticket_address'])
						{
							$qry = $db->prepare("SELECT tusers.firstname,tusers.lastname,tincidents.title,tincidents.description FROM tusers,tincidents WHERE tusers.id=tincidents.user AND tincidents.id=:ticket_id");
							$qry->execute(array('ticket_id' => $c_ticket_number));
							$ticket_data=$qry->fetch();
							$qry->closeCursor();
							
							$from=$rparameters['mail_from_adr'];
							$to=$rparameters['mail_newticket_address'];
							$object=T_('Un nouveau ticket a été déclaré par ').$ticket_data['lastname'].' '.$ticket_data['firstname'].' : '.$ticket_data['title'];
							$message = '
							'.T_('Le ticket').' n°'.$c_ticket_number.' '.T_("a été déclaré par l'utilisateur").' '.$ticket_data['lastname'].' '.$ticket_data['firstname'].'.<br />
							<br />
							<u>'.T_('Objet').':</u><br />
							'.$ticket_data['title'].'<br />		
							<br />	
							<u>'.T_('Description').':</u><br />
							'.$ticket_data['description'].'<br />
							<br />
							'.T_("Pour plus d'informations vous pouvez consulter le ticket sur").' <a href="'.$rparameters['server_url'].'/index.php?page=ticket&id='.$c_ticket_number.'">'.$rparameters['server_url'].'/index.php?page=ticket&id='.$c_ticket_number.'</a>.
							';
							$mail_auto=true;
							require('core/message.php');
							echo '['.$mailbox.'] [mail '.$count.'] Send mail to administrator: <span style="color:green">OK (mail_newticket parameter enable)</span><br />';
						}
					}
					//post treatment actions
					if($rparameters['imap_post_treatment']=='move' && $rparameters['imap_post_treatment_folder']!='')
					{
						//move mail
						$con_mailbox->moveMail($tab_MailsInfo->uid,$rparameters['imap_post_treatment_folder']);
						echo '['.$mailbox.'] [mail '.$count.'] Post-treatment action: <span style="color:green">MOVE ('.$rparameters['imap_post_treatment_folder'].' folder)</span><br />';
					}elseif($rparameters['imap_post_treatment']=='delete')
					{
						//delete mail
						imap_delete($con_mailbox->getImapStream(),$tab_MailsInfo->uid,FT_UID);
						echo '['.$mailbox.'] [mail '.$count.'] Post-treatment action: <span style="color:green">DELETE</span><br />';
					} else {
						//unread mail
						echo '['.$mailbox.'] [mail '.$count.'] Post-treatment action: <span style="color:green">UNREAD</span><br />';
					}
				} //END for each no blacklist mail
			} //END for each unread mail 
		} //END for each mail
	}
	echo '<br />';
	sleep(1); //timeout 1 seconds to limit network trafic
}
echo 'Total '.$count.' mail received</b><br />';
?>